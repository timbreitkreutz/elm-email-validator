module EmailValidatorTests exposing (..)

import Test exposing (..)
import Expect

import EmailValidator

suite : Test
suite =
    describe "The domain label validator" 
        [ test "should validate domain part com" <|\() -> Expect.equal True (EmailValidator.labelValid "com")
        , test "should validate domain part com-ma" <|\() -> Expect.equal True (EmailValidator.labelValid "com-ma")
        , test "should invalidate domain part blank" <|\() -> Expect.equal False (EmailValidator.labelValid "")
        , test "should invalidate domain part -thing" <|\() -> Expect.equal False (EmailValidator.labelValid "-thing")
        , test "should invalidate domain part thing-" <|\() -> Expect.equal False (EmailValidator.labelValid "thing-")
        , test "should invalidate domain part this&that" <|\() -> Expect.equal False (EmailValidator.labelValid "this&that")
        , test "should invalidate domain part what???" <|\() -> Expect.equal False (EmailValidator.labelValid "what???") 
        , test "should validate domain gmail.com" <|\() -> Expect.equal True (EmailValidator.domainValid (Maybe.Just"gmail.com"))
        , test "should invalidate domain .gmail" <|\() -> Expect.equal False (EmailValidator.domainValid (Maybe.Just".gmail"))
        , test "should invalidate domain gmail." <|\() -> Expect.equal False (EmailValidator.domainValid (Maybe.Just"gmail."))
        , test "should invalidate domain gmail..com" <|\() -> Expect.equal False (EmailValidator.domainValid (Maybe.Just"gmail..com"))
        , test "should validate local tim" <|\() -> Expect.equal True (EmailValidator.localValid (Maybe.Just "tim"))
        , test "should invalidate local tim." <|\() -> Expect.equal False (EmailValidator.localValid (Maybe.Just "tim."))
        , test "should invalidate local .tim" <|\() -> Expect.equal False (EmailValidator.localValid (Maybe.Just ".tim"))
        , test "should validate local i.am.tim" <|\() -> Expect.equal True (EmailValidator.localValid (Maybe.Just "i.am.tim"))
        , test "should validate local tim#b" <|\() -> Expect.equal True (EmailValidator.localValid (Maybe.Just "tim#b"))      
        , test "should invalidate local tim;b" <|\() -> Expect.equal False (EmailValidator.localValid (Maybe.Just "tim;b"))  
        , test "should invalidate local tim\\b" <|\() -> Expect.equal False (EmailValidator.localValid (Maybe.Just "tim\\b"))
        , test "should validate email tim@example.com" <|\() -> Expect.equal True (EmailValidator.emailValid "tim@example.com")
        , test "should validate email foo'baz@bar.com" <|\() -> Expect.equal True (EmailValidator.emailValid "foo'baz@bar.com")
        , test "should validate email firstname+lastname@example.com" <|\() -> Expect.equal True (EmailValidator.emailValid "firstname+lastname@example.com")
        , test "should validate email _______@example.com" <|\() -> Expect.equal True (EmailValidator.emailValid "_______@example.com")
        , test "should validate email email@example.co.jp" <|\() -> Expect.equal True (EmailValidator.emailValid "email@example.co.jp")
        , test "should validate email email@3com.com" <|\() -> Expect.equal True (EmailValidator.emailValid "email@3com.com")
        , test "should validate email email@a.com" <|\() -> Expect.equal True (EmailValidator.emailValid "email@a.com")
        , test "should validate email ALLCAPS@HEYYOU.COM" <|\() -> Expect.equal True (EmailValidator.emailValid "ALLCAPS@HEYYOU.COM")
        , test "should validate email email@example.museum" <|\() -> Expect.equal True (EmailValidator.emailValid "email@example.museum")
        , test "should validate email a@example.com" <|\() -> Expect.equal True (EmailValidator.emailValid "a@example.com")
        , test "should validate email a..b@example.com" <|\() -> Expect.equal True (EmailValidator.emailValid "a..b@example.com")
        , test "should validate email Rhonda&Joel5@gmail.com" <|\() -> Expect.equal True (EmailValidator.emailValid "Rhonda&Joel5@gmail.com")
        , test "should validate email a!b#c$d%e&f'g*h+i-j/k=l@gmail.com" <|\() -> Expect.equal True (EmailValidator.emailValid "a!b#c$d%e&f'g*h+i-j/k=l@gmail.com")
        , test "should validate email m?n^o_p`q{r|s}t~@gmail.com" <|\() -> Expect.equal True (EmailValidator.emailValid "m?n^o_p`q{r|s}t~@gmail.com")
        , test "should invalidate email not@valid" <|\() -> Expect.equal False (EmailValidator.emailValid "not@valid")
        , test "should invalidate email Test@abc.com@@" <|\() -> Expect.equal False (EmailValidator.emailValid "Test@abc.com@@")
        , test "should invalidate email blahblahblah" <|\() -> Expect.equal False (EmailValidator.emailValid "blahblahblah")
        , test "should invalidate email Katefern@.gmail.com" <|\() -> Expect.equal False (EmailValidator.emailValid "Katefern@.gmail.com")
        , test "should invalidate email daveioh2@icloud.c" <|\() -> Expect.equal False (EmailValidator.emailValid "daveioh2@icloud.c")
        , test "should invalidate email Marie.@icloud.com" <|\() -> Expect.equal False (EmailValidator.emailValid "Marie.@icloud.com")
        , test "should invalidate email dog_02@hot..ail.com" <|\() -> Expect.equal False (EmailValidator.emailValid "dog_02@hot..ail.com")
        , test "should invalidate email #@%^%#$@#$@#.com" <|\() -> Expect.equal False (EmailValidator.emailValid "#@%^%#$@#$@#.com")
        , test "should invalidate email @example.com" <|\() -> Expect.equal False (EmailValidator.emailValid "@example.com")
        , test "should invalidate email .email@example.com" <|\() -> Expect.equal False (EmailValidator.emailValid ".email@example.com")
        , test "should invalidate email email@-example.com" <|\() -> Expect.equal False (EmailValidator.emailValid "email@-example.com")
        , test "should invalidate email email@xample-.com" <|\() -> Expect.equal False (EmailValidator.emailValid "email@xample-.com")
        , test "should invalidate email test@@example.com" <|\() -> Expect.equal False (EmailValidator.emailValid "test@@example.com")
        , test "should invalidate email test@abc.com@example.com" <|\() -> Expect.equal False (EmailValidator.emailValid "test@abc.com@example.com")
        , test "should invalidate email Ricksomething@" <|\() -> Expect.equal False (EmailValidator.emailValid "Ricksomething@")
        , test "should invalidate email @gmail.com" <|\() -> Expect.equal False (EmailValidator.emailValid "@gmail.com")
        , test "should invalidate email @" <|\() -> Expect.equal False (EmailValidator.emailValid "@")
        ]